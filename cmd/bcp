#!/usr/bin/ksh
#Description:	Import/Export data of Table which is in Database(ORACLE)
#Version:	ORACLE_TOOLS_20030201.2.1
#Copyright:	YanXueXiang
#Create_Date:	2003/02/08:  haerbin

#system function begin declare section ......................#
check_length()
{
	######### TRUE=1
	_MAX=$2
	_LENGTH=`echo $1 | awk '{ print length($0) }'`
	if [ "$_LENGTH" != "$_MAX" ]; then
		return 0
	else
		return 1
	fi
}

is_digit()
{
	######### TRUE=1
	_NUM=`echo $* | awk '{ if ($0~/[^0-9]/) print "1" }'`
	if [ "$_NUM" != "" ]; then
		return 0
	else
		return 1
	fi
}

is_decimal()
{
	######### TRUE=1
	_DEC=`echo $* | awk '{ if ($0~/[^0-9.-]/) print "1" }'`
	if [ "$_DEC" != "" ]; then
		return 0
	fi
	_DEC=`echo $* | awk '{ t = length($0); m = index($0, "."); if (m != 0) { if (m == 1 || t == m) { print "1" } else { if (t - m > 2) { print "1" } else { sstr = substr($0, m + 1, t - m); if (index(sstr, ".") != 0) { print "1" } } } } }'`
	if [ "$_DEC" != "" ]; then
		return 0
	fi
	_DEC=`echo $* | awk '{ m = index($0, "-"); if (m != 0) { if (m != 1) { print "1" } else { sstr = substr($0, 2, length($0) - 1); if (index(sstr, "-") != 0) { print "1" } } } }'`
	if [ "$_DEC" != "" ]; then
		return 0
	else
		return 1
	fi
}

is_alpha()
{
	######### TRUE=1
	_LEFTERS_ONLY=`echo $* | awk '{ if($0~/[^a-zA-Z]/) print "1" }'`
	if [ "$_LEFTERS_ONLY" != "" ]; then
		return 0
	else
		return 1
	fi
}

is_date()
{
	######### TRUE=1
	# 0: YYYYMMDD 1: YYYY?MM?DD
	_LENGTH=`echo $2 | awk '{ print length($0) }'`
	if [ $1 -eq 0 ]; then
		if [ "$_LENGTH" != "8" ]; then
			return 0
		fi
		set -A YMD `echo $2 | awk '{ printf("%s %s %s", substr($0, 1, 4), substr($0, 5, 2), substr($0, 7, 2)) }'`
	else
		if [ "$_LENGTH" != "10" ]; then
			return 0
		fi
		set -A YMD `echo $2 | awk '{ printf("%s %s %s", substr($0, 1, 4), substr($0, 6, 2), substr($0, 9, 2)) }'`
	fi

	v_YYYY=`echo ${YMD[0]}`
	_NUM=`echo $v_YYYY | awk '{ if ($0~/[^0-9]/) print "1" }'`
	if [ "$_NUM" != "" ]; then
		return 0
	fi

	v_MM=`echo ${YMD[1]}`
	_NUM=`echo $v_MM | awk '{ if ($0~/[^0-9]/) print "1" }'`
	if [ "$_NUM" != "" ]; then
		return 0
	fi

	v_DD=`echo ${YMD[2]}`
	_NUM=`echo $v_DD | awk '{ if ($0~/[^0-9]/) print "1" }'`
	if [ "$_NUM" != "" ]; then
		return 0
	fi

	if [ $v_YYYY -le 1900 -o $v_YYYY -gt 2100 ]; then
		return 0
	fi

	v_abc=0
	a_YYYY=`expr $v_YYYY % 4`
	b_YYYY=`expr $v_YYYY % 100`
	c_YYYY=`expr $v_YYYY % 400`
	if [ $a_YYYY -eq 0 -a $b_YYYY -ne 0 -o $c_YYYY -eq 0 ]; then
		v_abc=1
	fi

	case $v_MM in
		01|03|05|07|08|10|12)
			if [ $v_DD -lt 1 -o $v_DD -gt 31 ]; then
				return 0
			fi
			;;
		02)
			if [ $v_abc -eq 1 ]; then
				if [ $v_DD -lt 1 -o $v_DD -gt 29 ]; then
					return 0
				fi
			else
				if [ $v_DD -lt 1 -o $v_DD -gt 28 ]; then
					return 0
				fi
			fi
			;;			
		04|06|09|11)
			if [ $v_DD -lt 1 -o $v_DD -gt 30 ]; then
				return 0
			fi
			;;
		*) return 0
			;;
	esac
	return 1
}
#system function end declare section.........................#

#application function begin declare section..................#
getword()
{
    _ALLWORD=`echo $* | awk -v KEYWORD=$1 '{
			ilen = length(KEYWORD); 
			printf("%s", substr($0, ilen + 1, length($0) - ilen)); 
		}'`
	_KEYWORD=$1"="
	_WORD=`echo $_ALLWORD | awk -v KEYWORD=$_KEYWORD '{
			iLocate = match($0, KEYWORD);
			if (!iLocate)
			{
				printf("%s", "_NONE_");
			}
			else
			{
				iWidth = iLocate + length(KEYWORD);
				sstr = substr($0, iWidth, length($0) - iWidth + 1);
				if (sstr == "")
				{
					printf("%s", "_ERROR_");
				}
				else
				{
					bg = index(sstr, "{");
					ed = index(sstr, "}"); 
					if (bg > ed || ed == bg + 1 || !bg || !ed) 
					{	
						printf("%s", "_ERROR_"); 
					} 
					else 
					{
						printf("%s", substr(sstr, bg+1, ed - bg - 1)); 
					}
				}
			}
		}'`
	echo $_WORD
}

check_type()
{
	_RESULT=`echo $1 | awk '{ if (toupper($0) == "IN") { print "0" } else { if (toupper($0) == "OUT") { print "1" } else { if ( toupper($0) == "FILE") { print "2" } else { print "3" } } } }'`
	return $_RESULT
}

check_action()
{
	_RESULT=`echo $1 | awk '{ if (toupper($0) == "APPEND") { print "0" } else { if (toupper($0) == "OVERRIDE") { print "1" } else { print "2" } } }'`
	return $_RESULT
}

check_numhead()
{
	echo $1 | grep ^[0-9] >/dev/null
	if [ $? -ne 1 ]; then
		return 1
	else
		return 0
	fi
}

version()
{
	echo "	Please Using: `basename $0` -h"
	echo "	*****************************************************"
	echo "	*  Copyright: \033[5m\033[7mYanXueXiang\033[0m\033[0m                           *"
	echo "	*  E-mail:    yanxx2000@21cn.com                    *"
	echo "	*  Version:   ORACLE_TOOLS_20030201.2.1             *"
	echo "	*****************************************************"

	exit -1
}

usage()
{
	echo "Purpose:"
	echo "    Import or Export data of table which is in ORACLE at UNIX"
	echo " "
	echo "Syntax:"
	echo "    `basename $0` -u USERNAME/PASSWORD [ [ -d ] [ -r ] -t TABLENAME ] [ -v VARIABLE ] [ -s SEPARATOR ] -x IN/OUT/FILE [ -X APPEND/OVERRIDE ] [ -f DATAFILE/SQLFILE ] [ COLUMNS={,,,} ] [ WHERE={...} ] [ ORDERBY={...} ]"
	echo " "
	echo "Flags:"
	echo "    -d: Delete blank of fields, but not to use function[ substr() and so on ] in COLUMNS, Valid only with '-x OUT' flag"
	echo "    -r: Automatically Restore data When import data Failed, Valid only with '-x IN' flag"
	echo "    -s: Separation Character of fields, Default by '|', Invalid only with '-x FILE' flag"
	echo "    -v: Do parallel load, Invalid only with '-x FILE' flag "
	echo "    COLUMNS: Column of Table, Invalid only with '-x FILE' flag"
	echo "    ORDERBY: Clause ORDER BY of SQL, Valid only with '-x OUT' flag"
	echo "    WHERE: Clause WHERE of SQL, Valid only with '-x OUT' flag"
	echo " "
	echo "Description:"
	echo "    Some parameters must to be at the \033[5m\033[7mend\033[0m\033[0m of the command if added, such as 'COLUMNS, WHERE, ORDERBY', Otherwise some flags are invalid!!! "
	echo " "
	echo "Example:"
	echo "    `basename $0` -u SCOTT/TIGER -x out -d -t table_1 COLUMNS={column_1, column_2} WHERE={column_1 in \(\'1003\', \'1004\', \'1005\'\)} ORDERBY={column_3}"
	echo "    `basename $0` -u SCOTT/TIGER -x in -r -t table_2 -s '|' -f demo.dat -X override COLUMNS={column_1, column_2}"
	echo " "
	echo "Exit Status:"
	echo "    0:  The command executed successfully!"
	echo "    -1: An error occurred!"
}

echo_error()
{
	case $1 in
		0) echo " Invalid Argument?"
			;;
		1) echo " Username or Password can't be null?"
			;;
		2) echo " Invalid operate type?"
			;;
		4) echo " Invalid data file?"
			;;
		5) echo " Invalid Operate Active?"
			;;
		30) echo " Tablename can't be null?"
			;;
		31) echo " Head of Table can't be number?"
			;;
		*) ;;
	esac
}
#application function end declare section....................#


#-----------------------implementation-----------------------#

g_TASK_TYPE=3
g_ACTION=2
g_RESTORE=0
g_SPACE_FLAG=0
g_USERPASS=""
g_TABLE=""
g_SEPARATOR="|"
g_DATAFILE=""
g_VARIABLE=""
g_SQL_COLUMNS=""
g_SQL_WHERE=""
g_SQL_ORDERBY=""
error_FLAG=0

if [ $# -eq 0 ]; then
	version
fi

while getopts u:x:X:t:s:f:v:dDhHrR name
do
	case $name in
		d|D) #DELETE_SPACE_FLAG
			g_SPACE_FLAG=1
			;;
		f) #DATAFILE
			g_DATAFILE=$OPTARG
			;;
		h|H) usage | more
			exit -1
			;;
		r|R) #RESTORE_FLAG 
			g_RESTORE=1
			;;
		t) #TABLENAME
			g_TABLE=$OPTARG
			if [ -z "$g_TABLE" ]; then
				error_FLAG=31
			fi
			;;
		u) #USERPASSWORD
			g_USERPASS=$OPTARG
			if [ -z "$g_USERPASS" ]; then
				error_FLAG=1
			fi
			;;
		x) #IN/OUT/EXE
			check_type $OPTARG
			g_TASK_TYPE=$?
			if [ $g_TASK_TYPE -eq 3 ]; then
				error_FLAG=2
			fi
			;;
		X) #ACTION
			check_action $OPTARG
			g_ACTION=$?
			if [ $g_ACTION -eq 2 ]; then
				error_FLAG=5
			fi
			;;
		s) #SEPARATOR CHARACTER
			g_SEPARATOR=$OPTARG
			;;
		v) #VARIABLE
			g_VARIABLE=$OPTARG
			;;
		*) 
			version
			;;
	esac
	if [ $error_FLAG -gt 0 ]; then
		echo_error $error_FLAG
		version
	fi
done

shift `expr $OPTIND - 1`
g_OTHERPAR=$*

if [ -z "$g_USERPASS" -o $g_TASK_TYPE -eq 3 ]; then
	echo "  WARNING:  Please Specify -u and -x parameter?"
	version
fi

if [ $g_TASK_TYPE -ne 2 ]; then
	if [ -z "$g_TABLE" ]; then
		echo "  WARNING:  Please Specify -t parameter?" 
		version
	fi

	if [ ! -z "$g_VARIABLE" ]; then
		tmpFile=$g_VARIABLE".desc"
	else
		tmpFile=$g_TABLE".desc"
	fi

	rm -f $tmpFile >/dev/null

sqlplus -S $g_USERPASS >/dev/null <<!
	set pages 0;
	set concat on;
	set trimspool on;
	set termout off;
	set show off;
	set autoprint off;
	set autotrace off;
	set echo off;
	set head off;
	set flush off;
	set feedback off;
	spool $tmpFile;
	desc $g_TABLE;
	spool off;
!
	if [ $? -ne 0 ]; then
		echo "  ERROR:  Operate database Failed, Please Check User and Password?"
		exit -1
	fi
	if [ ! -r $tmpFile ]; then
		echo "  ERROR:  Query table Failed, Please Check System RWX Permission?"
		exit -1
	fi
	grep ERROR: $tmpFile >/dev/null
	if [ $? -ne 1 ]; then
		echo "  ERROR:  Table["$g_TABLE"] not exist?"
		rm -f $tmpFile >/dev/null
		exit -1
	fi
fi

if [ ! -z "$g_OTHERPAR" ]; then
	s_FLAG=0
	tmp_SQL=`getword "COLUMNS" $g_OTHERPAR`
	if [ "$tmp_SQL" = "_ERROR_" ]; then
		echo " Invalid parameter at end of command?"
		if [ $g_TASK_TYPE -ne 2 ]; then
			rm -f $tmpFile >/dev/null
		fi
		version
	fi

	if [ "$tmp_SQL" != "_NONE_" ]; then
		g_SQL_COLUMNS=$tmp_SQL
		s_FLAG=`expr $s_FLAG + 1`

		if [ $g_TASK_TYPE -eq 1 ]; then
			if [ ! -z "$g_VARIABLE" ]; then
				C_MFIELD=$g_VARIABLE".Cfield"
			else
				C_MFIELD=$g_TABLE".Cfield"
			fi
			rm -f $C_MFIELD >/dev/null

			t_SQL=`echo $tmp_SQL | awk -v DSPACE=$g_SPACE_FLAG -v CCHAR="'" -v DCHAR=$g_SEPARATOR -v FIELDNAME=$C_MFIELD -F "," '{
					sflag = 0;
					if (NF)
					{
						sflag = 1;
						for (i = 1; i < NF + 1; i++)
						{
							if (length($i) == 0)
							{
								sflag = 0;
								break;
							}
							if (i == 1)
							{
								if (DSPACE)
								{
									printf("TRIM(%s)\n", $i) >> FIELDNAME
								}
								else
								{
									printf("%s\n", $i) >> FIELDNAME
								}
							}
							else
							{
								if (DSPACE)
								{
									printf("||%s%s%s||TRIM(%s)\n", CCHAR, DCHAR, CCHAR,  $i) >> FIELDNAME
								}
								else
								{
									printf("||%s%s%s||%s\n", CCHAR, DCHAR, CCHAR,  $i) >> FIELDNAME
								}
							}
						}
						if (sflag)
						{
							printf("||%s%s%s\n", CCHAR, DCHAR, CCHAR) >>FIELDNAME
						}
					}
					if (sflag)
					{
						print "OK"
					}
					else
					{
						print "ERROR"
					}
				}'`

			if [ "$t_SQL" = "ERROR" ]; then
				echo " Invalid parameter at end of command?"
				rm -f $C_MFIELD >/dev/null
				if [ $g_TASK_TYPE -ne 2 ]; then
					rm -f $tmpFile >/dev/null
				fi
				version
			fi
			if [ ! -r $C_MFIELD ]; then
				echo "  ERROR:  Please Check System RWX Permission?"
				if [ $g_TASK_TYPE -ne 2 ]; then
					rm -f $tmpFile >/dev/null
				fi
				exit -1
			fi
		fi
	fi

	tmp_SQL=`getword "WHERE" $g_OTHERPAR`
	if [ "$tmp_SQL" = "_ERROR_" ]; then
		echo " Invalid parameter at end of command?"
		if [ $g_TASK_TYPE -ne 2 ]; then
			rm -f $tmpFile >/dev/null
		fi
		version
	fi
	if [ "$tmp_SQL" != "_NONE_" ]; then
		if [ $g_TASK_TYPE -eq 0 ]; then
			echo " Invalid parameter at end of command?"
			version
		fi
		g_SQL_WHERE=$tmp_SQL
		s_FLAG=`expr $s_FLAG + 1`
	fi

	tmp_SQL=`getword "ORDERBY" $g_OTHERPAR`
	if [ "$tmp_SQL" = "_ERROR_" ]; then
		echo " Invalid parameter at end of command?"
		if [ $g_TASK_TYPE -ne 2 ]; then
			rm -f $tmpFile >/dev/null
		fi
		version
	fi
	if [ "$tmp_SQL" != "_NONE_" ]; then
		if [ $g_TASK_TYPE -eq 0 ]; then
			echo " Invalid parameter at end of command?"
			version
		fi
		g_SQL_ORDERBY=$tmp_SQL
		s_FLAG=`expr $s_FLAG + 1`
	fi

	if [ $s_FLAG -eq 0 ]; then
		echo " Invalid parameter at end of command?"
		if [ $g_TASK_TYPE -ne 2 ]; then
			rm -f $tmpFile >/dev/null
		fi
		version
	fi
fi

if [ $g_TASK_TYPE -ne 1 ]; then
	if [ -z "$g_DATAFILE" ]; then
		if [ $g_TASK_TYPE -eq 0 ]; then
			g_DATAFILE=$g_TABLE".dat"
		else
			g_DATAFILE=$g_TABLE".sql"
		fi
	fi	
	if [ ! -r $g_DATAFILE -o ! -s $g_DATAFILE ]; then
		echo "  ERROR:  File["$g_DATAFILE"] not exist or filesize is zero?"
		rm -f $tmpFile >/dev/null
		exit -1
	fi
fi

case $g_TASK_TYPE in
	0)	########## IMPORT ##########
		if [ $g_ACTION -eq 2 ]; then
			echo "  WARNING:  Please Specify -X parameter?" 
			version
		fi

		if [ ! -z "$g_VARIABLE" ]; then
			CTLFILE=$g_VARIABLE".ctl"
		else
			CTLFILE=$g_TABLE".ctl"
		fi
		rm -f $CTLFILE >/dev/null

		echo "LOAD DATA INFILE ""'"$g_DATAFILE"'" >> $CTLFILE
		if [ $g_ACTION -eq 0 ]; then
			echo " APPEND INTO TABLE "$g_TABLE >> $CTLFILE
		else
			echo " INSERT INTO TABLE "$g_TABLE >> $CTLFILE
		fi
		echo " FIELDS TERMINATED BY '"$g_SEPARATOR"' " >> $CTLFILE

		if [ ! -z "$g_SQL_COLUMNS" ]; then
			echo "( "$g_SQL_COLUMNS") " >> $CTLFILE
		else
			awk -v LFIELD=$CTLFILE -F " " '{
				eof = 1;
				while (getline == 1)
				{
					if (NR < 3 || substr($1, 1, 1) == "-")
					{
						continue
					}
					if ($1 != "")
					{
						if (eof == 1)
						{
							printf("(%s", $1) >> LFIELD
							eof = 0;
						}
						else
						{
							printf(",\n%s", $1) >> LFIELD
						}
					}
					if ($1 == "" && eof == 0)
					{
						printf("%s", ")") >> LFIELD
						break
					}
				}
			}' $tmpFile
			rm -f $tmpFile >/dev/null
		fi

		NEWTABLE="ORACLE_BCP_TMP"
		if [ $g_RESTORE -eq 1 ]; then
sqlplus -S $g_USERPASS >/dev/null <<!
				DROP TABLE $NEWTABLE;
				CREATE TABLE $NEWTABLE AS SELECT * FROM $g_TABLE;
!
			if [ $? -ne 0 ]; then
				rm -f $CTLFILE >/dev/null
				echo "  ERROR:  Bakup Table Error?"
				exit -1
			fi
		fi

		if [ $g_ACTION -eq 1 ]; then
sqlplus -S $g_USERPASS >/dev/null <<!
				TRUNCATE TABLE $g_TABLE;
!
			if [ $? -ne 0 ]; then
				rm -f $CTLFILE >/dev/null
				echo "  ERROR:  Delete Table Failed?"
				exit -1
			fi
		fi

		if [ ! -z "$g_VARIABLE" ]; then
			logFILE=$g_VARIABLE".log"
			badFILE=$g_VARIABLE".bad"
		else
			logFILE=$g_TABLE".log"
			badFILE=$g_TABLE".bad"
		fi

		rm -f $logFILE >/dev/null
		rm -f $badFILE >/dev/null
		#sqlldr userid=$g_USERPASS control=$CTLFILE readsize=5242880 log=$logFILE bad=$badFILE parallel=true commit_discontinued=false errors=0 silent=all >/dev/null
		sqlldr userid=$g_USERPASS control=$CTLFILE bindsize=1310720 readsize=5242880 log=$logFILE bad=$badFILE parallel=true commit_discontinued=false errors=0 >/dev/null
		if [ $? -ne 0 -o -r $badFILE ]; then
			if [ $g_RESTORE -eq 1 ]; then
sqlplus -S $g_USERPASS >/dev/null <<!
					TRUNCATE TABLE $g_TABLE;
					INSERT INTO $g_TABLE SELECT * FROM $NEWTABLE;
					DROP TABLE $NEWTABLE;
!
			fi
			rm -f $CTLFILE >/dev/null
			echo "  ERROR:  Load data Failed, Please check file "$logFILE"?"
			exit -1
		fi
		if [ $g_RESTORE -eq 1 ]; then
sqlplus -S $g_USERPASS >/dev/null <<!
				DROP TABLE $NEWTABLE;
!
		fi
		rm -f $CTLFILE $logFILE $badFILE >/dev/null
		;;

	1)	########## EXPORT ##########
		if [ ! -z "$g_VARIABLE" ]; then
			_MFIELD=$g_VARIABLE".field"
		else
			_MFIELD=$g_TABLE".field"
		fi
		if [ -z "$g_SQL_COLUMNS" ]; then
			awk -v DSPACE=$g_SPACE_FLAG -v CCHAR="'" -v DCHAR=$g_SEPARATOR -v FIELDNAME=$_MFIELD -F " " '{
					eof = 1;
					while (getline == 1)
					{
						if (NR < 3 || substr($1, 1, 1) == "-")
						{
							continue
						}
						if ($1 != "")
						{
							if (eof == 1)
							{
								if (DSPACE)
								{
									printf("TRIM(%s)\n", $1) >> FIELDNAME
								}
								else
								{
									printf("%s\n", $1) >> FIELDNAME
								}
								eof = 0;
							}
							else
							{
								if (DSPACE)
								{
									printf("||%s%s%s||TRIM(%s)\n", CCHAR, DCHAR, CCHAR,  $1) >> FIELDNAME
								}
								else
								{
									printf("||%s%s%s||%s\n", CCHAR, DCHAR, CCHAR,  $1) >> FIELDNAME
								}
							}
						}
						if ($1 == "" && eof == 0)
						{
							printf("||%s%s%s\n", CCHAR, DCHAR, CCHAR) >> FIELDNAME
							break
						}
					}
			}' $tmpFile
		fi

		rm -f $tmpFile >/dev/null
		if [ ! -z "$g_SQL_COLUMNS" ]; then
			FIELDDESC=`cat $C_MFIELD`
		else
			FIELDDESC=`cat $_MFIELD`
		fi
		SQLOTHER=""
		if [ ! -z "$g_SQL_WHERE" ]; then
			SQLOTHER=" WHERE "$g_SQL_WHERE
		fi
		if [ ! -z "$g_SQL_ORDERBY" ]; then
			SQLOTHER=$SQLOTHER" ORDER BY "$g_SQL_ORDERBY
		fi
		if [ -z "$g_DATAFILE" ]; then
			g_DATAFILE=$g_TABLE".dat"
		fi
		rm -f $g_DATAFILE >/dev/null

sqlplus -S $g_USERPASS >/dev/null <<!
			set pages 0;
			set COLSEP "'"$g_SEPARATOR"'";
			set concat on;
			set trimspool on;
			set termout off;
			set show off;
			set autoprint off;
			set autotrace off;
			set linesize 2000;
			set echo off;
			set head off;
			set flush off;
			set feedback off;
			spool $g_DATAFILE;
			SELECT $FIELDDESC FROM $g_TABLE $SQLOTHER;
			spool off;
!
		if [ $? -ne 0 ]; then
			echo " Export Data Error?"
			rm -f $g_DATAFILE >/dev/null
		fi
		rm -f $_MFIELD >/dev/null
		rm -f $C_MFIELD >/dev/null
		;;
	2)	########## EXECUTE ##########
sqlplus -S $g_USERPASS >/dev/null <<!
			set concat on;
			set trimspool on;
			set termout off;
			set show off;
			set autoprint off;
			set autotrace off;
			set echo off;
			set flush off;
			set feedback off;
			@$g_DATAFILE;
!
		if [ $? -ne 0 ]; then
			echo "  ERROR:  Operate database Failed, Please Check User and Password and SQLFILE?"
			exit -1
		fi
		;;

    *)  rm -f $tmpFile >/dev/null
		version
		;;
esac

exit 0

